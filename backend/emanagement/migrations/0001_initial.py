# Generated by Django 3.1.4 on 2021-02-09 06:51

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import django_extensions.db.fields
import emanagement.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('middle_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Middle Name')),
                ('date_of_birth', models.DateField(blank=True, null=True, validators=[emanagement.utils.age], verbose_name='Data of Birth')),
                ('phone_number', models.CharField(blank=True, help_text='Enter Your Number with <b>country code.</b>', max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='Enter Valid Phone Number.', regex='\\+91\\d{10}')], verbose_name='Phone Number')),
                ('country', models.CharField(blank=True, max_length=25, null=True, verbose_name='Country Name')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='State Name')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='City Name')),
                ('pincode', models.CharField(blank=True, max_length=6, null=True, verbose_name='Pincode')),
                ('full_address', models.TextField(blank=True, max_length=50, null=True, verbose_name='Full Address')),
                ('is_defaulter', models.BooleanField(default=False, help_text='User in defaulter list')),
                ('profile', models.FileField(blank=True, default='user.jpg', null=True, upload_to=emanagement.utils.pic_upload, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['blp', 'bmp', 'dib', 'bufr', 'cur', 'pcx', 'dcx', 'dds', 'ps', 'eps', 'fit', 'fits', 'fli', 'flc', 'ftc', 'ftu', 'gbr', 'gif', 'grib', 'h5', 'hdf', 'png', 'apng', 'jp2', 'j2k', 'jpc', 'jpf', 'jpx', 'j2c', 'icns', 'ico', 'im', 'iim', 'tif', 'tiff', 'jfif', 'jpe', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mpo', 'msp', 'palm', 'pcd', 'pdf', 'pxr', 'pbm', 'pgm', 'ppm', 'pnm', 'psd', 'bw', 'rgb', 'rgba', 'sgi', 'ras', 'tga', 'icb', 'vda', 'vst', 'webp', 'wmf', 'emf', 'xbm', 'xpm'], message='Select valid Cover Image.'), emanagement.utils.profile_size])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['first_name'],
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[['Action and adventure', 'Action and adventure'], ['Art', 'Art'], ['Alternate history', 'Alternate history'], ['Autobiography', 'Autobiography'], ['Anthology', 'Anthology'], ['Biography', 'Biography'], ['Chick lit', 'Chick lit'], ['Book review', 'Book review'], ["Children's", "Children's"], ['Cookbook', 'Cookbook'], ['Comic book', 'Comic book'], ['Diary', 'Diary'], ['Coming-of-age', 'Coming-of-age'], ['Dictionary', 'Dictionary'], ['Crime', 'Crime'], ['Encyclopedia', 'Encyclopedia'], ['Drama', 'Drama'], ['Guide', 'Guide'], ['Fairytale', 'Fairytale'], ['Health', 'Health'], ['Fantasy', 'Fantasy'], ['History', 'History'], ['Graphic novel', 'Graphic novel'], ['Journal', 'Journal'], ['Historical fiction', 'Historical fiction'], ['Math', 'Math'], ['Horror', 'Horror'], ['Memoir', 'Memoir'], ['Mystery Prayer', 'Mystery Prayer'], ['Paranormal romance', 'Paranormal romance'], ['Religion, spirituality and new age', 'Religion, spirituality and new age'], ['Picture book', 'Picture book'], ['Textbook', 'Textbook'], ['Poetry', 'Poetry'], ['Review', 'Review'], ['Political thriller', 'Political thriller'], ['Science', 'Science'], ['Romance', 'Romance'], ['Self help', 'Self help'], ['Satire', 'Satire'], ['Travel', 'Travel'], ['Science fiction', 'Science fiction'], ['True crime', 'True crime'], ['Short story', 'Short story'], ['Suspense', 'Suspense'], ['Thriller', 'Thriller'], ['Young adult', 'Young adult']], editable=False, max_length=50, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BookPublish',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(error_messages={'unique': 'This name is already exists.'}, max_length=100, unique=True)),
                ('website', models.URLField(unique=True)),
                ('genre', models.ManyToManyField(help_text='Hold down “Control”, or “Command” on a Mac, to select more than one.', to='emanagement.Genre', verbose_name='Genre')),
            ],
            options={
                'ordering': ['company_name'],
                'unique_together': {('company_name', 'website')},
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(max_length=100, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('date_of_birth', models.DateField(null=True)),
                ('died', models.DateField(blank=True, null=True, verbose_name='Died')),
                ('aboutAuthor', models.TextField(max_length=250)),
                ('profile', models.FileField(blank=True, default='user.jpg', upload_to=emanagement.utils.pic_upload, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['blp', 'bmp', 'dib', 'bufr', 'cur', 'pcx', 'dcx', 'dds', 'ps', 'eps', 'fit', 'fits', 'fli', 'flc', 'ftc', 'ftu', 'gbr', 'gif', 'grib', 'h5', 'hdf', 'png', 'apng', 'jp2', 'j2k', 'jpc', 'jpf', 'jpx', 'j2c', 'icns', 'ico', 'im', 'iim', 'tif', 'tiff', 'jfif', 'jpe', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mpo', 'msp', 'palm', 'pcd', 'pdf', 'pxr', 'pbm', 'pgm', 'ppm', 'pnm', 'psd', 'bw', 'rgb', 'rgba', 'sgi', 'ras', 'tga', 'icb', 'vda', 'vst', 'webp', 'wmf', 'emf', 'xbm', 'xpm'], message='Select valid Cover Image.'), emanagement.utils.profile_size], verbose_name='Author Profile')),
                ('genre', models.ManyToManyField(help_text='Hold down “Control”, or “Command” on a Mac, to select more than one.', to='emanagement.Genre', verbose_name='Genre')),
            ],
            options={
                'ordering': ['date_of_birth'],
                'unique_together': {('first_name', 'last_name')},
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Book ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='Name')),
                ('update_date', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], max_length=12, verbose_name='Language')),
                ('edition', models.IntegerField(choices=[[1, '1st'], [2, '2nd'], [3, '3rd'], [4, '4th'], [5, '5th'], [6, '6th'], [7, '7th'], [8, '8th'], [9, '9th'], [10, '10th']], verbose_name='Edition')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Book Cost(per unit)')),
                ('page', models.PositiveIntegerField(verbose_name='Total Page')),
                ('description', models.TextField(verbose_name='Book Description')),
                ('stock', models.PositiveIntegerField(verbose_name='Stock')),
                ('in_stock', models.BooleanField(default=True, editable=False)),
                ('today_stock', models.PositiveIntegerField(editable=False, verbose_name='Current stock')),
                ('rating', models.DecimalField(decimal_places=1, max_digits=3, validators=[emanagement.utils.validate_rating], verbose_name='Rating')),
                ('profile', models.FileField(blank=True, default='elibrary.jpg', upload_to=emanagement.utils.pic_upload, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['blp', 'bmp', 'dib', 'bufr', 'cur', 'pcx', 'dcx', 'dds', 'ps', 'eps', 'fit', 'fits', 'fli', 'flc', 'ftc', 'ftu', 'gbr', 'gif', 'grib', 'h5', 'hdf', 'png', 'apng', 'jp2', 'j2k', 'jpc', 'jpf', 'jpx', 'j2c', 'icns', 'ico', 'im', 'iim', 'tif', 'tiff', 'jfif', 'jpe', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mpo', 'msp', 'palm', 'pcd', 'pdf', 'pxr', 'pbm', 'pgm', 'ppm', 'pnm', 'psd', 'bw', 'rgb', 'rgba', 'sgi', 'ras', 'tga', 'icb', 'vda', 'vst', 'webp', 'wmf', 'emf', 'xbm', 'xpm'], message='Select valid Cover Image.'), emanagement.utils.profile_size], verbose_name='Book cover')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['name', 'author'])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='emanagement.bookauthor', verbose_name='Author Name')),
                ('genre', models.ManyToManyField(help_text='Hold down “Control”, or “Command” on a Mac, to select more than one.', to='emanagement.Genre', verbose_name='Genre')),
                ('publish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='emanagement.bookpublish', verbose_name='Publisher Name')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'author')},
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True, help_text='The date book is issue by user.')),
                ('due_date', models.DateTimeField(default=datetime.datetime(2021, 2, 16, 6, 51, 22, 903360, tzinfo=utc), help_text='By defualt date is 7 days')),
                ('book', models.ForeignKey(limit_choices_to={'in_stock': True}, on_delete=django.db.models.deletion.CASCADE, to='emanagement.book')),
                ('user', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'book')},
            },
        ),
    ]
